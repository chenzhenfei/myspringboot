java 设计模式： 代理模式

1、静态代理：
    实现原理：
    1、代理类和 和代理接口的实现类都需要实现 接口
    2、代理类中添加需要代理的实现类作为属性，将作为构造参数传入
    3、在代理类中实现的接口方法，都调用注入的实现类方法。

    原型：  实现类A imple interface C , 代理类proxy B imple interface C
           在 B 中设置 A 作为属性 ，B 中实现方法均调用 A 重写的 C 的接口方法即可，
           这种方式实现就可以通过 代理 B 去简介调用A ，而且可以实现在调用A 的方法之前和之后可以加入代理方 自己的方法作为监控。
    缺点：就是每一个代理都要生成一个代理类，伴随着需要代理类的数量大，在开发过程中实用性降低


2、动态代理：
         实现原理：通过java 的反射机制来动态 实现对代理目标类的反射形成代理
      java Proxy:jdk 动态代理
             1、创建一个统一的目标代理类 ProxyService implements InvocationHandler  实现invocationHandler 接口;
             2、在代理类中 设置一个代理目标对象属性，添加代理目标对象的构造方法
             3、实现 invocationHandler 接口的invoke 方法
             4、实现，
                     1、 new 一个代理目标的类 A
                     2、 new 一个统一代理类 ProxyService，传入目标类A，作为该目标类的代理类 new ProxyService(A) ->B
                     3、 通过代理 Proxy.newInstance(a.getClass.getClassLoader(),a.getClass.getIntefaces,B);得到代理后的A
                     4、 以上即實現了對 A 的動態代理

      cglib : 通过asm框架获取到代理目标类的字节码，进行代理

        区别：
             java proxy 只能针对实现过接口的目标类
             cglib 主要针对类实现代理，通过代理目标类生成目标类的子类，但是应为采用的是继承，所以不能对final 修饰的类进行代理

             随着jdk 版本升级，jdk proxy 代理功能有所提升，spring aop 优先使用jdk proxy 代理实现接口的bean




3、應用場景
   spring Aop; 兩種方式： java proxy ,另外是 cglib ,默认采用 jdk proxy ,若果设置成true ,则强制使用 cglib 进行代理
   sprint tx : 事務















